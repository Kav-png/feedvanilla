import React, { useRef, useEffect, useState } from "react";
import { AgGridReact } from "ag-grid-react";
import "ag-grid-community/styles/ag-grid.css";
import "ag-grid-community/styles/ag-theme-alpine.css";
import SearchMultiSelectFilter from "./SearchMultiSelectFilter";

const MyGrid = ({ rowData, filterDictionary }) => {
  const gridRef = useRef(null);

  const [columnDefs] = useState([
    { field: "status", filter: SearchMultiSelectFilter },
    { field: "priority", filter: SearchMultiSelectFilter },
    { field: "assignedTo", filter: SearchMultiSelectFilter },
    { field: "createdDate" }
  ]);

  // Build AG Grid filter model from dictionary
  const buildFilterModel = (filters) => {
    const filterModel = {};
    Object.keys(filters).forEach((field) => {
      if (filters[field] && filters[field].length > 0) {
        filterModel[field] = {
          filterType: "custom", // mark as custom filter
          directSearch: "",      // you can wire this up if needed
          selected: filters[field]
        };
      }
    });
    return filterModel;
  };

  // Re-apply filters whenever filterDictionary changes
  useEffect(() => {
    if (gridRef.current?.api) {
      const filterModel = buildFilterModel(filterDictionary);
      gridRef.current.api.setFilterModel(filterModel);
      gridRef.current.api.onFilterChanged();
    }
  }, [filterDictionary]);

  return (
    <div className="ag-theme-alpine" style={{ height: 500, width: "100%" }}>
      <AgGridReact
        ref={gridRef}
        rowData={rowData}
        columnDefs={columnDefs}
      />
    </div>
  );
};

export default MyGrid;