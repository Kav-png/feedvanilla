Got it âœ… â€” you want your custom filter to:
	1.	Match the AG Grid Alpine theme (same look & feel as built-in filters).
	2.	Have two searches:
	â€¢	Top: direct search (filters rows immediately, like quick filter).
	â€¢	Bottom: set search (filters the checkbox list of unique values).

Iâ€™ll refactor the component to use Alpine theme styles (input spacing, buttons, scroll list) so it looks like a native AG Grid filter popup.

â¸»

ðŸ”¹ SearchMultiSelectFilter.jsx (Alpine styled, double search)

import React, { useCallback, useMemo, useState } from 'react';
import { useGridFilter } from 'ag-grid-react';

const SearchMultiSelectFilter = ({ model, onModelChange, getValue, api }) => {
  // Extract unique values for this column
  const uniqueValues = useMemo(() => {
    const values = new Set();
    api.forEachNode((node) => {
      const v = getValue(node);
      if (v != null) values.add(v);
    });
    return Array.from(values).sort();
  }, [api, getValue]);

  // State: search (direct), setSearch (checkbox filter), selections
  const [directSearch, setDirectSearch] = useState(model?.directSearch || '');
  const [setSearch, setSetSearch] = useState('');
  const [selectedValues, setSelectedValues] = useState(
    model?.selected ?? uniqueValues
  );

  // Filter logic
  const doesFilterPass = useCallback(
    ({ node }) => {
      const value = getValue(node);
      // direct search applies immediately
      if (directSearch && !value?.toString().toLowerCase().includes(directSearch.toLowerCase())) {
        return false;
      }
      // must also be in selected values
      if (!selectedValues.includes(value)) return false;
      return true;
    },
    [directSearch, selectedValues, getValue]
  );

  useGridFilter({ doesFilterPass });

  // Update AG Grid model
  const updateModel = (newDirect, newSelected) => {
    onModelChange({
      directSearch: newDirect,
      selected: newSelected
    });
  };

  const toggleValue = (val) => {
    const newSelected = selectedValues.includes(val)
      ? selectedValues.filter((v) => v !== val)
      : [...selectedValues, val];
    setSelectedValues(newSelected);
  };

  const onClear = () => {
    setSelectedValues([]);
    updateModel(directSearch, []);
  };

  const onSelectAll = () => {
    setSelectedValues(uniqueValues);
    updateModel(directSearch, uniqueValues);
  };

  const onApply = () => {
    updateModel(directSearch, selectedValues);
  };

  // Filtered values for checkbox list
  const filteredValues = uniqueValues.filter((v) =>
    v.toString().toLowerCase().includes(setSearch.toLowerCase())
  );

  return (
    <div className="ag-filter-body-wrapper" style={{ padding: '4px', width: 220 }}>
      {/* Direct search (applies instantly) */}
      <div className="ag-filter-field-input ag-input-wrapper" style={{ marginBottom: 6 }}>
        <input
          className="ag-input-field-input ag-text-field-input"
          type="text"
          placeholder="Search values..."
          value={directSearch}
          onChange={(e) => {
            setDirectSearch(e.target.value);
            updateModel(e.target.value, selectedValues); // apply instantly
          }}
          style={{ width: '100%' }}
        />
      </div>

      {/* Set search (filters list only) */}
      <div className="ag-filter-field-input ag-input-wrapper" style={{ marginBottom: 6 }}>
        <input
          className="ag-input-field-input ag-text-field-input"
          type="text"
          placeholder="Search in list..."
          value={setSearch}
          onChange={(e) => setSetSearch(e.target.value)}
          style={{ width: '100%' }}
        />
      </div>

      {/* Scrollable checkbox list */}
      <div
        style={{
          maxHeight: 100,
          overflowY: 'auto',
          border: '1px solid var(--ag-border-color)',
          borderRadius: 4,
          padding: 4,
          marginBottom: 8
        }}
      >
        {filteredValues.map((val) => (
          <label
            key={val}
            style={{
              display: 'flex',
              alignItems: 'center',
              marginBottom: 2,
              fontSize: '0.85em'
            }}
          >
            <input
              type="checkbox"
              className="ag-checkbox-input"
              checked={selectedValues.includes(val)}
              onChange={() => toggleValue(val)}
              style={{ marginRight: 6 }}
            />
            {val}
          </label>
        ))}
      </div>

      {/* Action buttons */}
      <div style={{ display: 'flex', gap: 4, flexWrap: 'wrap' }}>
        <button className="ag-standard-button ag-filter-apply-panel-button" onClick={onClear}>
          Clear
        </button>
        <button className="ag-standard-button ag-filter-apply-panel-button" onClick={onSelectAll}>
          All
        </button>
        <button className="ag-standard-button ag-filter-apply-panel-button" onClick={onApply}>
          Apply
        </button>
      </div>
    </div>
  );
};

export default SearchMultiSelectFilter;


â¸»

ðŸ”¹ Usage (same as before)

const [columnDefs] = useState([
  { field: 'name' },
  { field: 'city', filter: SearchMultiSelectFilter } // custom filter
]);


â¸»

ðŸ”¹ Features
	â€¢	ðŸŽ¨ Styled with Alpine theme classes (ag-input-field-input, ag-standard-button, etc.).
	â€¢	ðŸ”Ž Two searches:
	â€¢	Direct search (top): applies filter instantly to grid rows.
	â€¢	Set search (bottom): narrows down checkbox list only.
	â€¢	ðŸ“œ Checkbox list is scrollable (max height ~4 items).
	â€¢	âœ… Buttons: Clear, All, Apply with Alpine button look.

â¸»

Would you like me to also make the Apply button close the filter popup (same behavior as built-in filters), or should it just apply the filter and keep the popup open?