Perfect 👍 — you basically want a combined custom filter:
	•	A search input (substring match).
	•	A scrollable list of unique values with checkboxes (multi-select filter).
	•	Buttons: Clear, Select All, Apply.
	•	By default: all values selected.
	•	Limit visible checkbox list to 4 values max (scrollable).

Let’s build this exactly in AG Grid React style, sticking to the docs (model, onModelChange, useGridFilter).

⸻

🔹 SearchMultiSelectFilter.jsx

import React, { useCallback, useMemo, useState } from 'react';
import { useGridFilter } from 'ag-grid-react';

const SearchMultiSelectFilter = ({ model, onModelChange, getValue, api, colDef }) => {
  // Extract all unique values from grid data for this column
  const uniqueValues = useMemo(() => {
    const values = new Set();
    api.forEachNode((node) => {
      const v = getValue(node);
      if (v != null) values.add(v);
    });
    return Array.from(values).sort();
  }, [api, getValue]);

  // State: search + selected values
  const [searchText, setSearchText] = useState(model?.search || '');
  const [selectedValues, setSelectedValues] = useState(
    model?.selected ?? uniqueValues
  );

  // Filtering logic
  const doesFilterPass = useCallback(
    ({ node }) => {
      const value = getValue(node);
      if (searchText && !value?.toString().toLowerCase().includes(searchText.toLowerCase())) {
        return false;
      }
      if (!selectedValues.includes(value)) return false;
      return true;
    },
    [searchText, selectedValues, getValue]
  );

  // Register filter logic with AG Grid
  useGridFilter({ doesFilterPass });

  // Handlers
  const updateModel = (newSearch, newSelected) => {
    onModelChange({
      search: newSearch,
      selected: newSelected
    });
  };

  const toggleValue = (val) => {
    const newSelected = selectedValues.includes(val)
      ? selectedValues.filter((v) => v !== val)
      : [...selectedValues, val];
    setSelectedValues(newSelected);
  };

  const onClear = () => {
    setSelectedValues([]);
    updateModel(searchText, []);
  };

  const onSelectAll = () => {
    setSelectedValues(uniqueValues);
    updateModel(searchText, uniqueValues);
  };

  const onApply = () => {
    updateModel(searchText, selectedValues);
  };

  // Filter unique values with search
  const filteredValues = uniqueValues.filter((v) =>
    v.toString().toLowerCase().includes(searchText.toLowerCase())
  );

  return (
    <div style={{ padding: 8, width: 200 }}>
      {/* Search box */}
      <input
        type="text"
        placeholder="Search..."
        value={searchText}
        onChange={(e) => {
          setSearchText(e.target.value);
        }}
        style={{ width: '100%', marginBottom: 6 }}
      />

      {/* Scrollable list of checkboxes */}
      <div style={{ maxHeight: 100, overflowY: 'auto', border: '1px solid #ccc', padding: 4 }}>
        {filteredValues.map((val) => (
          <div key={val}>
            <label>
              <input
                type="checkbox"
                checked={selectedValues.includes(val)}
                onChange={() => toggleValue(val)}
              />
              {val}
            </label>
          </div>
        ))}
      </div>

      {/* Action buttons */}
      <div style={{ marginTop: 8, display: 'flex', gap: 4, flexWrap: 'wrap' }}>
        <button onClick={onClear}>Clear</button>
        <button onClick={onSelectAll}>All</button>
        <button onClick={onApply}>Apply</button>
      </div>
    </div>
  );
};

export default SearchMultiSelectFilter;


⸻

🔹 Usage in Grid (App.jsx)

import React, { useState } from 'react';
import { AgGridReact } from 'ag-grid-react';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';

import SearchMultiSelectFilter from './SearchMultiSelectFilter';

const App = () => {
  const [rowData] = useState([
    { name: 'Alice', city: 'London' },
    { name: 'Bob', city: 'Paris' },
    { name: 'Charlie', city: 'New York' },
    { name: 'Dave', city: 'London' },
    { name: 'Eve', city: 'Paris' },
  ]);

  const [columnDefs] = useState([
    { field: 'name' },
    { field: 'city', filter: SearchMultiSelectFilter } // 👈 use custom filter here
  ]);

  return (
    <div className="ag-theme-alpine" style={{ height: 400, width: 600 }}>
      <AgGridReact rowData={rowData} columnDefs={columnDefs} />
    </div>
  );
};

export default App;


⸻

🔹 Features Working Now
	•	✅ Search box filters down checkbox list.
	•	✅ Checkbox list scrollable (shows ~4 values max).
	•	✅ Clear button deselects everything.
	•	✅ All button selects all.
	•	✅ Apply button applies current selection + search filter.
	•	✅ Works fully integrated with AG Grid’s filtering system.

⸻

Would you like me to also sync the “Apply” button with AG Grid’s built-in filter buttons (so it closes automatically on apply, like the default filters do)?